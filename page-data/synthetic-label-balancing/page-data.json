{"componentChunkName":"component---src-templates-post-js","path":"/synthetic-label-balancing/","result":{"data":{"ghostPost":{"id":"Ghost__Post__63b4711dac52ed003d6a1744","title":"Can you use synthetic data for label balancing?","slug":"synthetic-label-balancing","featured":true,"feature_image":"https://sdv.ghost.io/content/images/2023/01/Header--1-.png","excerpt":"Imbalanced data can prevent your projects from succeeding. Will synthetic data work? Explore the rationale behind label balancing.","custom_excerpt":"Imbalanced data can prevent your projects from succeeding. Will synthetic data work? Explore the rationale behind label balancing.","visibility":"public","created_at_pretty":"03 January, 2023","published_at_pretty":"10 January, 2023","updated_at_pretty":"23 January, 2023","created_at":"2023-01-03T13:17:01.000-05:00","published_at":"2023-01-10T12:59:16.000-05:00","updated_at":"2023-01-23T14:49:21.000-05:00","meta_title":"Synthetic Data for Label Balancing","meta_description":"Imbalanced data can prevent your projects from succeeding. Will synthetic data work? Explore the rationale behind label balancing.","og_description":null,"og_image":null,"og_title":null,"twitter_description":"Imbalanced data can prevent your projects from succeeding. Will synthetic data work? Explore the rationale behind label balancing.","twitter_image":null,"twitter_title":"Synthetic Data for Label Balancing","authors":[{"name":"Neha Patki","slug":"neha","bio":"Neha first created the SDV for her Master's thesis at MIT and also has experience in Product Management from Google. She is excited to use her expertise to build a great user experience at DataCebo.","profile_image":"https://sdv.ghost.io/content/images/2021/05/Neha_Patki--1-.jpg","twitter":"@n4atki","facebook":null,"website":"https://www.linkedin.com/in/nehapatki/"}],"primary_author":{"name":"Neha Patki","slug":"neha","bio":"Neha first created the SDV for her Master's thesis at MIT and also has experience in Product Management from Google. She is excited to use her expertise to build a great user experience at DataCebo.","profile_image":"https://sdv.ghost.io/content/images/2021/05/Neha_Patki--1-.jpg","twitter":"@n4atki","facebook":null,"website":"https://www.linkedin.com/in/nehapatki/"},"primary_tag":{"name":"Applications","slug":"applications","description":"This blog focuses on the value that synthetic data brings to solving enterprise problems. Synthetic data can be used to test applications, develop unbiased AI models and more. Explore new use cases, concepts and case studies.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"Applications","slug":"applications","description":"This blog focuses on the value that synthetic data brings to solving enterprise problems. Synthetic data can be used to test applications, develop unbiased AI models and more. Explore new use cases, concepts and case studies.","feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"A dataset can unlock many doors for your organization, helping with everything from predictive forecasting to data-driven decision making. But in some situations, you may not have all of the data that you need. A common scenario is having too few data points, which can lead to an imbalance of variables.\n\nIn this article, we'll take a closer look at this scenario. We'll recap why this can be a problem for your projects and walk you through some possible solutions. We'll end by explaining why synthetic data might be especially useful for overcoming this challenge.\n\n\nWhy is it a problem to have a data imbalance?\n\nAt a basic level, data is a record of events, and a data imbalance happens when some events occur much less frequently than others. For example:\n\n * In healthcare, cancer occurs less frequently than diabetes\n * In finance, it's rare to see fraudulent credit card charges\n * In local government, it's rare to have a day with a major natural disaster such as a fire\n\nA natural data imbalance isn't inherently a problem, but it can become one if the rare events are important. As an example, let's assume you're working at a hospital that is treating COVID patients. One day a new COVID variant – let's call it Variant X – appears in the population. Since it is so new, it currently occurs very rarely (<2.5% of the time). This leads to a data imbalance for this COVID variant, as illustrated below.\n\nThis imbalance is a problem when it's critical to account for Variant X. For example, you may want to build a predictive model for who is most likely to be hospitalized. If you use the data as-is, your model may only consider Omicron (the majority) and treat Variant X as an outlier. This can lead to poor predictions – and bad planning – because Variant X may soon become the dominant strain.\n\n\nUsing Data Augmentation to Fix Imbalances\n\nIn an ideal world, your data would include more patients with Variant X. But until then, you need to find a solution that will allow you to produce reasonable predictions. What if you create some artificial patient data for the sake of making a robust predictive model?\n\nLet's assume you have data for 1,000 COVID hospital patients, 975 with the Omicron variant and 25 with Variant X. If you can create 950 additional artificial Variant X patients, then you can create an evenly-balanced dataset. This process is illustrated below.\n\nYou may be skeptical because there are only 25 patients with Variant X to begin with. How can we reasonably produce 950 more based on that? As usual with data science, the devil is in the details. Let's go through some approaches to see what works.\n\n\nAttempt #1: Oversampling\n\nYour first instinct may be to take the existing 25 Variant X patients and weigh them more heavily. One easy way to achieve this: You can duplicate each original patient 40 times to get 1,000 patients.\n\nIn data science, this is known as oversampling. Sometimes, this is done programmatically, sampling patients (with replacement) as many times as needed. Other times, this can be achieved using mathematical formulas to provide weights. An illustration is shown below.\n\nWith oversampling, Variant X is no longer rare, so your model cannot ignore it. But if you actually use this data, your project may not be successful. Your model may confidently predict that all Variant X patients must be over the age of 50. But this is not necessarily right – just because the existing patients had these characteristics doesn't mean Variant X patients always will.\n\nThe mistake was over-emphasizing the same set of patients, making the model more likely to create strong claims. This is commonly referred to as overfitting the data: The model over-emphasizes the importance of a small number of records, and makes blanket predictions that lack nuance.\n\n\nAttempt #2: Randomizing\n\nTo avoid the problems that come with oversampling, let's explore the opposite direction for argument's sake: What if we created artificial Variant X patients by choosing variables completely at random? An example is illustrated below.\n\nRandomization avoids overfitting because no patient is repeated. But this approach introduces problems of its own: You may find that the data doesn't make sense anymore. The example data above highlights some problems that can arise. We see an artificial 23-year-old patient with dementia, and many diabetic patients with low BMIs. In the medical world, these events are not likely and indicate that there is a problem with the data.\n\nThese inconsistencies may (rightfully) dissuade you from using randomization. Since random data lacks patterns, a model will not be able to draw conclusions from it. In data science, we call this a problem of noisiness. Noisy data has too many random combinations to produce any useful learnings.\n\n\nA Better Solution: Defining Neighborhoods\n\nSo far, we've seen attempts at extreme ends.\n\n 1. Oversampling will emphasize one set of patients, leading to an overfit model\n 2. Randomizing will make the dataset noisy, precluding useful conclusions\n\nThe solution we need falls somewhere in the middle: We'd like to loosely base the artificial patients on the real ones. This is related to the data science concept of neighborhoods. Drawing a neighborhood around some patients identifies general commonalities between them – without setting any strict rules. For example, Variant X patients may be more likely to have had a known exposure, but it's not guaranteed. Note that there is no exact definition for a neighborhood. It can change based on our assumptions and how broad we want to make it.\n\nOnce we know a neighborhood, we can create artificial patients that are inside it. These patients won't be exactly the same as the existing ones, but they won't have completely random values either.\n\nSynthetic Data for Label Balancing\n\nA compelling solution for discovering neighborhoods is synthetic data. A synthetic data software – such as our open source Synthetic Data Vault (SDV) – uses machine learning to learn patterns from real patients, and then creates synthetic patients.\n\nThe SDV discovers neighborhoods at a variety of levels in the form of trends. It's able to learn overall trends (for all patients) as well as trends that are unique to a variable (such as Variant X). For example:\n\n * For all patients, a higher age corresponds to a greater risk of dementia and a higher BMI corresponds to a greater risk of diabetes.\n * Variant X patients tend to be older, while Omicron patients tend to be younger.\n * Etc.\n\nAs a result, synthetic patients have some variation – but the data still makes sense in context. An example table of SDV-generated patients is shown below.\n\nThis is the middle solution we were looking for: Synthetic data won't cause overfitting and is less noisy than randomization. The best part is that there are multiple synthetic data techniques and settings available in the SDV, providing flexibility and tradeoffs.\n\n\nTakeaways\n\nIn this article, we explored imbalanced datasets. It is common to have an imbalanced dataset due to rare events – which becomes a problem if those rare events are important for your project.\n\nFixing the imbalance problem requires a careful tradeoff between overfitting data and creating noisy data. Synthetic data is a compelling solution that achieves a middle ground by discovering neighborhoods of similar data. This allows you to realistically fix the imbalance without resorting to either extreme.\n\nAre you interested in label balancing? Have you already explored using the SDV for this problem? Drop us a comment below!","html":"<p>A dataset can unlock many doors for your organization, helping with everything from predictive forecasting to data-driven decision making. But in some situations, you may not have all of the data that you need. A common scenario is having too few data points, which can lead to an imbalance of variables.</p><p>In this article, we'll take a closer look at this scenario. We'll recap why this can be a problem for your projects and walk you through some possible solutions. We'll end by explaining why <strong>synthetic data</strong><em><strong> </strong></em>might be especially useful for overcoming this challenge.</p><h3 id=\"why-is-it-a-problem-to-have-a-data-imbalance\">Why is it a problem to have a data imbalance?</h3><p>At a basic level, data is a record of events, and a <strong>data</strong> <strong>imbalance</strong> happens when some events occur much less frequently than others. For example:</p><ul><li>In healthcare, cancer occurs less frequently than diabetes</li><li>In finance, it's rare to see fraudulent credit card charges</li><li>In local government, it's rare to have a day with a major natural disaster such as a fire</li></ul><p>A natural data imbalance isn't inherently a problem, but it can become one if the rare events are important. As an example, let's assume you're working at a hospital that is treating COVID patients. One day a new COVID variant – let's call it Variant X – appears in the population. Since it is so new, it currently occurs very rarely (&lt;2.5% of the time). This leads to a data imbalance for this COVID variant, as illustrated below.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2023/01/Original-Dataset--2-.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1000\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2023/01/Original-Dataset--2-.png 600w, https://sdv.ghost.io/content/images/size/w1000/2023/01/Original-Dataset--2-.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2023/01/Original-Dataset--2-.png 1600w, https://sdv.ghost.io/content/images/2023/01/Original-Dataset--2-.png 2000w\" sizes=\"(min-width: 720px) 720px\"><figcaption><em>A hypothetical dataset of COVID patients. Each patient has multiple variables – Age, BMI, etc. The variable \"COVID Variant\" has an imbalance: Variant X is far less common than Omicron.</em></figcaption></figure><p>This imbalance is a problem when it's critical to account for Variant X. For example, you may want to build a predictive model for who is most likely to be hospitalized. If you use the data as-is, your model may only consider Omicron (the majority) and treat Variant X as an outlier. This can lead to poor predictions – and bad planning – because Variant X may soon become the dominant strain.</p><h3 id=\"using-data-augmentation-to-fix-imbalances\">Using Data Augmentation to Fix Imbalances</h3><p>In an ideal world, your data would include more patients with Variant X. But until then, you need to find a solution that will allow you to produce reasonable predictions. What if you create some artificial patient data for the sake of making a robust predictive model? </p><p>Let's assume you have data for 1,000 COVID hospital patients, 975 with the Omicron variant and 25 with Variant X. If you can create 950 additional artificial Variant X patients, then you can create an evenly-balanced dataset. This process is illustrated below.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2023/01/Label-Balancing--2-.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1000\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2023/01/Label-Balancing--2-.png 600w, https://sdv.ghost.io/content/images/size/w1000/2023/01/Label-Balancing--2-.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2023/01/Label-Balancing--2-.png 1600w, https://sdv.ghost.io/content/images/2023/01/Label-Balancing--2-.png 2000w\" sizes=\"(min-width: 720px) 720px\"><figcaption><em>You can balance your data by creating artificial patients who all have Variant X. When you combine the new patients with the existing ones, you will have a balanced dataset, with 50% Omicron and 50% Variant X.</em></figcaption></figure><p>You may be skeptical because there are only 25 patients with Variant X to begin with. How can we reasonably produce 950 more based on that? As usual with data science, the devil is in the details. Let's go through some approaches to see what works.</p><h3 id=\"attempt-1-oversampling\">Attempt #1: Oversampling</h3><p>Your first instinct may be to take the existing 25 Variant X patients and weigh them more heavily. One easy way to achieve this: You can duplicate each original patient 40 times to get 1,000 patients.</p><p>In data science, this is known as <a href=\"https://en.wikipedia.org/wiki/Oversampling_and_undersampling_in_data_analysis\">oversampling</a>. Sometimes, this is done programmatically, sampling patients (with replacement) as many times as needed. Other times, this can be achieved using mathematical formulas to provide weights. An illustration is shown below.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2023/01/Oversampling--2-.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1000\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2023/01/Oversampling--2-.png 600w, https://sdv.ghost.io/content/images/size/w1000/2023/01/Oversampling--2-.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2023/01/Oversampling--2-.png 1600w, https://sdv.ghost.io/content/images/2023/01/Oversampling--2-.png 2000w\" sizes=\"(min-width: 720px) 720px\"><figcaption><em>One way to fix an imbalance is by oversampling your data. You can manually duplicate the rows (shown here), sample them with replacement or use mathematics to weigh them more heavily.</em></figcaption></figure><p>With oversampling, Variant X is no longer rare, so your model cannot ignore it. But if you actually use this data, your project may not be successful. Your model may confidently predict that all Variant X patients must be over the age of 50. But this is not necessarily right – just because the existing patients had these characteristics doesn't mean Variant X patients always will.</p><p>The mistake was over-emphasizing the same set of patients, making the model more likely to create strong claims. This is commonly referred to as <a href=\"https://en.wikipedia.org/wiki/Overfitting\">overfitting the data</a>: The model over-emphasizes the importance of a small number of records, and makes blanket predictions that lack nuance.</p><h3 id=\"attempt-2-randomizing\">Attempt #2: Randomizing</h3><p>To avoid the problems that come with oversampling, let's explore the opposite direction for argument's sake: What if we created artificial Variant X patients by choosing variables completely at random? An example is illustrated below.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2023/01/Randomizing--2-.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1000\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2023/01/Randomizing--2-.png 600w, https://sdv.ghost.io/content/images/size/w1000/2023/01/Randomizing--2-.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2023/01/Randomizing--2-.png 1600w, https://sdv.ghost.io/content/images/2023/01/Randomizing--2-.png 2000w\" sizes=\"(min-width: 720px) 720px\"><figcaption><em>Another way to fix an imbalance problem is by using randomization. You can create artificial Variant X patients by selecting the other variables (Age, BMI, etc.) at random.</em></figcaption></figure><p>Randomization avoids overfitting because no patient is repeated. But this approach introduces problems of its own: You may find that the data doesn't make sense anymore. The example data above highlights some problems that can arise. We see an artificial 23-year-old patient with dementia, and many diabetic patients with low BMIs. In the medical world, these events are not likely and indicate that there is a problem with the data.</p><p>These inconsistencies may (rightfully) dissuade you from using randomization. Since random data lacks patterns, a model will not be able to draw conclusions from it. In data science, we call this a problem of <em>noisiness</em>. <a href=\"https://en.wikipedia.org/wiki/Noisy_data\">Noisy data</a> has too many random combinations to produce any useful learnings.</p><h3 id=\"a-better-solution-defining-neighborhoods\">A Better Solution: Defining Neighborhoods</h3><p>So far, we've seen attempts at extreme ends.</p><ol><li>Oversampling will emphasize one set of patients, leading to an overfit model</li><li>Randomizing will make the dataset noisy, precluding useful conclusions</li></ol><p>The solution we need falls somewhere in the middle: We'd like to <em>loosely</em> base the artificial patients on the real ones. This is related to the data science concept of <a href=\"https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm\">neighborhoods</a>. Drawing a <strong>neighborhood</strong> around some patients identifies general commonalities between them – without setting any strict rules. For example, Variant X patients <em>may</em> be more likely to have had a known exposure, but it's not guaranteed. Note that there is no exact definition for a neighborhood. It can change based on our assumptions and how broad we want to make it.</p><p>Once we know a neighborhood, we can create artificial patients that are inside it. These patients won't be exactly the same as the existing ones, but they won't have completely random values either.</p><p><strong>Synthetic Data for Label Balancing</strong></p><p>A compelling solution for discovering neighborhoods is <strong>synthetic data</strong>. A synthetic data<strong> </strong>software – such as our open source <a href=\"https://sdv.dev/\">Synthetic Data Vault</a> (SDV) – uses machine learning to learn patterns from real patients, and then creates synthetic patients.</p><p>The SDV discovers neighborhoods at a variety of levels in the form of trends. It's able to learn overall trends (for all patients) as well as trends that are unique to a variable (such as Variant X). For example:</p><ul><li>For all patients, a higher age corresponds to a greater risk of dementia and a higher BMI corresponds to a greater risk of diabetes.</li><li>Variant X patients tend to be older, while Omicron patients tend to be younger.</li><li>Etc.</li></ul><p>As a result, synthetic patients have some variation – but the data still makes sense in context. An example table of SDV-generated patients is shown below.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2023/01/Synthesizing--2-.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1000\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2023/01/Synthesizing--2-.png 600w, https://sdv.ghost.io/content/images/size/w1000/2023/01/Synthesizing--2-.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2023/01/Synthesizing--2-.png 1600w, https://sdv.ghost.io/content/images/2023/01/Synthesizing--2-.png 2000w\" sizes=\"(min-width: 720px) 720px\"><figcaption><em>A software like the SDV generates synthetic patients with Variant X. The synthetic patients are not exact duplicates of the original, but they aren't completely random either.</em></figcaption></figure><p>This is the middle solution we were looking for: Synthetic data won't cause overfitting and is less noisy than randomization. The best part is that there are multiple synthetic data techniques and settings available in the SDV, providing flexibility and tradeoffs.</p><h3 id=\"takeaways\">Takeaways</h3><p>In this article, we explored imbalanced datasets. It is common to have an imbalanced dataset due to rare events – which becomes a problem if those rare events are important for your project.</p><p>Fixing the imbalance problem requires a careful tradeoff between overfitting data and creating noisy data. <strong>Synthetic data</strong> is a compelling solution that achieves a middle ground by discovering neighborhoods of similar data. This allows you to realistically fix the imbalance without resorting to either extreme.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://sdv.ghost.io/content/images/2023/01/Data-Creation-Spectrum--2-.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2000\" height=\"1000\" srcset=\"https://sdv.ghost.io/content/images/size/w600/2023/01/Data-Creation-Spectrum--2-.png 600w, https://sdv.ghost.io/content/images/size/w1000/2023/01/Data-Creation-Spectrum--2-.png 1000w, https://sdv.ghost.io/content/images/size/w1600/2023/01/Data-Creation-Spectrum--2-.png 1600w, https://sdv.ghost.io/content/images/2023/01/Data-Creation-Spectrum--2-.png 2000w\" sizes=\"(min-width: 720px) 720px\"><figcaption><em>Synthetic data is a solution that balances the extremes of overfitting the data and creating noisy data.</em></figcaption></figure><p>Are you interested in label balancing? Have you already explored using the SDV for this problem? Drop us a comment below!</p>","url":"https://sdv.ghost.io/synthetic-label-balancing/","canonical_url":"https://datacebo.com/blog/synthetic-label-balancing","uuid":"2ca67664-3ca9-4710-942e-5536ec5f2dc8","page":null,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"63b4711dac52ed003d6a1744","reading_time":6}},"pageContext":{"slug":"synthetic-label-balancing"}},"staticQueryHashes":["2061773391","2358152166","2362887240","2439066133","2561578252","2657115718","2731221146","2839364760","4145280475"]}